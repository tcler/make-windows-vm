
# For NFS/CIFS deployment

param (
	[switch]$cifs = $true,
	[switch]$nfs = $true,
	[switch]$kdc = $false
)

Function Out-Host {
	$str = $args[0]
	Write-Host "$str"
	echo "$str"
}

Function Unzip-File() {
	param([string]$ZipFile, [string]$TargetFolder)
	if (!(Test-Path $TargetFolder)) {
		mkdir $TargetFolder
	}
	$shellApp = New-Object -ComObject Shell.Application
	$files = $shellApp.NameSpace($ZipFile).Items()
	$shellApp.NameSpace($TargetFolder).CopyHere($files)
}

Function Install-Sshd() {
	param([string]$Url)
	(new-object net.webclient).DownloadFile($Url, 'C:\OpenSSH.zip')
	Unzip-File -ZipFile 'C:\OpenSSH.zip' -TargetFolder 'C:\Program Files'
	powershell -ExecutionPolicy Bypass -File 'C:\Program Files\OpenSSH-Win64\install-sshd.ps1'
	New-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
	$oldpath = (Get-ItemProperty -Path 'Registry::HKLM\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH).path
	$newpath = "$oldpath;C:\Program Files\OpenSSH-Win64"
	Set-ItemProperty -Path "Registry::HKLM\System\CurrentControlSet\Control\Session Manager\Environment" -Name PATH -Value $newPath
	net start sshd
	Set-Service sshd -StartupType Automatic
	Set-Service ssh-agent -StartupType Automatic
}

Out-Host "==> Start postinstall ..."
Out-Host "==> Start initialize second disk ..."
Get-Disk |
	Where partitionstyle -eq 'raw' |
	Initialize-Disk -PartitionStyle MBR -PassThru |
	New-Partition -AssignDriveLetter -UseMaximumSize |
	Format-Volume -FileSystem NTFS -NewFileSystemLabel "test" -Confirm:$false

$LogPath = "C:"
$TestPath = "C:"
if (Test-Path -Path E:) {
	$LogPath = "E:"
	$TestPath = "E:"
} elseif (Test-Path -Path A:) {
	$LogPath = "A:"
}

$PostProg = "@ANSF_DRIVE_LETTER@\postinstall.ps1"
$RunOnceKey = "HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce"

$Stage = $args[0]
if (!$Stage) { $Stage = "base" }

Out-Host "==> Start postinstall $Stage ..."

switch($Stage) {
	"base" {
		# activate windows with the product key
		# no need to activate: ??? 

		# turning off firewall
		Out-Host "`n==> turning off firewall"
		Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False

		# enabling remote desktop
		Out-Host "`n==> enabling remote desktop"
		Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
		#Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
		#Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 0

		# saving network connection details
		Out-Host "`n==> save ipconfig info"
		ipconfig | out-file -encoding utf8 $LogPath\@IPCONFIG_LOGF@

		# disabling IE ESC (Internet Explorer Enhanced Security Configuration)
		Out-Host "`n==> disabling IE ESC (Internet Explorer Enhanced Security Configuration)"
		$AdminKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}"
		$UserKey = "HKLM:\SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A8-37EF-4b3f-8CFC-4F3A74704073}"
		Set-ItemProperty -Path $AdminKey -Name "IsInstalled" -Value 0
		Set-ItemProperty -Path $UserKey -Name "IsInstalled" -Value 0
		Stop-Process -Name Explorer
		Out-Host "`n==> IE Enhanced Security Configuration (ESC) has been disabled."

		# disabling shutdown event tracker/shutdown dialog
		Out-Host "`n==> disabling shutdown event tracker/dialog"
		reg add "HKLM\SOFTWARE\Policies\Control\Microsoft\Windows NT\Reliability" /v ShutDownReasonOn /t REG_DWORD /d 0 /f
		reg add "HKLM\SOFTWARE\Policies\Control\Microsoft\Windows NT\Reliability" /v ShutDownReasonUI /t REG_DWORD /d 0 /f

		# adding hostname for the virtual host
		Out-Host "`n==> add host's hostname to $Env:WinDir\system32\drivers\etc\hosts"
		echo "" >> $Env:WinDir\system32\drivers\etc\hosts
		echo "192.168.122.1 @VIRTHOST@" >> $Env:WinDir\system32\drivers\etc\hosts

		# disabling DNS registration on the network interface
		$MacDisable = "@MAC_DISABLE@"
		if ($MacDisable) {
			Out-Host "`n==> disabling DNS registration on the network interface"
			$Nic=(Get-WmiObject "Win32_NetworkAdapterConfiguration where MACAddress='$MacDisable'")
			$Nic.SetDynamicDNSRegistration($false,$false)
		}

		# installing openssh
		$OpenSSHUrl = "@OpenSSHUrl@"
		if ($OpenSSHUrl) {
			Out-Host "`n==> install and start ssh server"
			Install-Sshd -Url $OpenSSHUrl
		}

		# Config NFS server
		Out-Host "`n==> Setup NFS Server"
		if (Get-Command Add-WindowsFeature -errorAction SilentlyContinue) {
			Add-WindowsFeature FS-NFS-Service
		}
		if (Get-Command Add-WindowsCapability -errorAction SilentlyContinue) {
			Set-ExecutionPolicy unrestricted
			Add-WindowsCapability -Online -Name FS-NFS-Service
		}
		Import-Module NFS
		$nfsPath = "$TestPath\nfstest"
		$nfsShareName = "nfstest"
		$nfsPath2 = "$TestPath\nfssch"
		$nfsShareName2 = "nfssch"
		mkdir $nfsPath
		mkdir $nfsPath2
		New-NfsShare -Name $nfsShareName -Path $nfsPath -Authentication All -AllowRootAccess $True -Permission readwrite
		New-NfsShare -Name $nfsShareName2 -Path $nfsPath2 -Authentication All -AllowRootAccess $True -Permission readwrite
		Set-NfsShare -Name $nfsShareName -EnableUnmappedAccess $True
		Set-NfsShare -Name $nfsShareName2 -EnableUnmappedAccess $True
		nfsadmin server stop
		nfsadmin server start
		echo $null >> $nfsPath\file
		New-Item -ItemType SymbolicLink -Path "$nfsPath\link" -Target "$nfsPath\file"
		New-Item -ItemType SymbolicLink -Path "$nfsPath\link2" -Target "file"

		# Config CIFS server
		Out-Host "`n==> Setup CIFS Server"
		Enable-WindowsOptionalFeature -Online -FeatureName smb1protocol -NoRestart
		Set-SmbServerConfiguration -EnableSMB2Protocol $true -Force
		Import-Module SmbShare
		Import-Module SmbWitness
		$cifsPath = "$TestPath\cifstest"
		$cifsShareName = "cifstest"
		$cifsPath2 = "$TestPath\cifssch"
		$cifsShareName2 = "cifssch"
		mkdir $cifsPath
		mkdir $cifsPath2
		New-SmbShare -Name $cifsShareName -Path $cifsPath -Description "for cifs share test 0_o"
		New-SmbShare -Name $cifsShareName2 -Path $cifsPath2 -Description "for cifs share test too 0_o"
		Grant-SmbShareAccess -Name $cifsShareName -AccountName "Everyone" -AccessRight Full -Force
		Grant-SmbShareAccess -Name $cifsShareName2 -AccountName "Everyone" -AccessRight Full -Force
		Install-WindowsFeature -Name FS-Resource-Manager -IncludeManagementTools
		New-FsrmQuota -Path $cifsPath -Description "limit usage to 10 GB." -Size 10GB
		New-FsrmQuota -Path $cifsPath2 -Description "limit usage to 10 GB." -Size 10GB
		Get-SmbShareAccess -Name $cifsShareName
		Get-SmbShareAccess -Name $cifsShareName2
		echo $null >> $cifsPath\file
		New-Item -ItemType SymbolicLink -Path "$cifsPath\link" -Target "$cifsPath\file"
		New-Item -ItemType SymbolicLink -Path "$cifsPath\link2" -Target "file"

		# for login without passwd from client
		net user guest /active:yes
		#reg add "HKLM\SYSTEM\CurrentControlSet\Control\Lsa" /v forceguest /t REG_DWORD /d 00000000 /f

		# Setup krb5 for NFS/CIFS
		if ($kdc) {
			# Setup AD as Domain Controller
			Out-Host "`n==> Setup AD as Domain Controller"
			Install-windowsfeature -name AD-Domain-Services -IncludeManagementTools
			$SafePasswd=(convertto-securestring "@ADMINPASSWORD@" -asplaintext -force)
			Install-ADDSForest `
			-DomainName @AD_DOMAIN@ `
			-SafeModeAdministratorPassword $SafePasswd `
			-CreateDNSDelegation:$false `
			-NoDNSOnNetwork:$true `
			-DomainMode @AD_DOMAIN_LEVEL@ `
			-DomainNetBIOSName @NETBIOS_NAME@ `
			-ForestMode @AD_FOREST_LEVEL@ `
			-InstallDNS:$true `
			-NoRebootOnCompletion:$true `
			-Force

			# Reboot to complete Active Directory setup
			Out-Host "`n==> Reboot to complete Active Directory setup"
			Set-ItemProperty $RunOnceKey "NextRun" "powershell $PostProg afterADSetup >> @POST_INSTALL_LOG@ 2>&1"
			shutdown -r -f -t 10 -c "Shutting down in 1 minute: Reboot to complete Active Directory setup"
			exit
		}
	}

	"afterADSetup" {
		# do this just after AD has been set up
		Out-Host "`n==> reset dns ip"
		$DNS_IPS=(Get-WmiObject "Win32_NetworkAdapterConfiguration where MACAddress='@DNS_IF_MAC@'").IPaddress
		dnscmd . /ResetListenAddresses $DNS_IPS

		# Install Standalone Root CA
		Out-Host "`n==> Install Standalone Root CA"
		Import-Module ServerManager
		Add-WindowsFeature Adcs-Cert-Authority -IncludeManagementTools
		Install-AdcsCertificationAuthority -force -CAType EnterpriseRootCa

		# Reboot to complete Root CA Services setup
		Out-Host "`n==> Reboot to complete Root CA setup"
		Set-ItemProperty $RunOnceKey "NextRun" "powershell $PostProg afterRootCASetup >> @POST_INSTALL_LOG@ 2>&1"
		shutdown -r -f -t 10 -c "Shutting down in 1 minute: Reboot to complete Root CA setup"
		exit
	}

	"afterRootCASetup" {
		# Time synchronization
		Out-Host "`n==> sync time"
		w32tm /config /manualpeerlist:clock.redhat.com /syncfromflags:manual /reliable:yes /update
		net stop w32time
		net start w32time
		w32tm /resync

		# Add KDC
		Out-Host "`n==> Add KDC"
		ksetup.exe /AddKDC @NETBIOS_NAME@ @FQDN@

		# Add krb5 principal
		setspn -A nfs/@GUEST_HOSTNAME@ @GUEST_HOSTNAME@
		setspn -A nfs/@FQDN@ @GUEST_HOSTNAME@
		setspn -A cifs/@GUEST_HOSTNAME@ @GUEST_HOSTNAME@
		setspn -A cifs/@FQDN@ @GUEST_HOSTNAME@
	}
}
# complete
Out-Host "`n==> install complete!!!"
echo "install complete" | out-file -encoding utf8 $LogPath\@INSTALL_COMPLETE_FILE@
if ($LogPath -ne "C:") {
	Copy-Item -Path $LogPath\* -Destination C:\
	Copy-Item -Path @POST_INSTALL_LOG@ -Destination $LogPath\
}

taskkill /F /IM explorer.exe
explorer
